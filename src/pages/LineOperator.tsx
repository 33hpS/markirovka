import * as React from 'react';
import { useState, useRef, useEffect } from 'react';

interface Product {
  id: string;
  name: string;
  sku: string;
  price: number;
  category: string;
  description: string;
  manufacturer: string;
  weight: string;
  barcode: string;
  qrData: string;
  status: 'active' | 'inactive' | 'discontinued';
}

interface LabelTemplate {
  id: string;
  name: string;
  category: string;
  description: string;
  thumbnail: string;
  suitable: string[];
}

interface PrintJob {
  id: string;
  productId: string;
  templateId: string;
  quantity: number;
  type: 'direct' | 'pdf';
  timestamp: string;
  operator: string;
  status: 'pending' | 'completed' | 'failed';
}

// –ú–æ–∫ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤
const mockProducts: Product[] = [
  {
    id: '1',
    name: '–ú–æ–ª–æ–∫–æ —Ü–µ–ª—å–Ω–æ–µ 3.2%',
    sku: 'MILK-032-1L',
    price: 89.9,
    category: '–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã',
    description: '–ù–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —Ü–µ–ª—å–Ω–æ–µ –º–æ–ª–æ–∫–æ –∂–∏—Ä–Ω–æ—Å—Ç—å—é 3.2%',
    manufacturer: '–û–û–û "–ú–æ–ª–æ—á–Ω–∞—è —Ñ–µ—Ä–º–∞"',
    weight: '1 –ª',
    barcode: '4600134912345',
    qrData: 'https://markirovka.sherhan1988hp.workers.dev/product/MILK-032-1L',
    status: 'active',
  },
  {
    id: '2',
    name: '–•–ª–µ–± –ø—à–µ–Ω–∏—á–Ω—ã–π –Ω–∞—Ä–µ–∑–Ω–æ–π',
    sku: 'BREAD-WHT-500G',
    price: 45.5,
    category: '–•–ª–µ–±–æ–±—É–ª–æ—á–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è',
    description: '–°–≤–µ–∂–∏–π –ø—à–µ–Ω–∏—á–Ω—ã–π —Ö–ª–µ–±, –Ω–∞—Ä–µ–∑–∞–Ω–Ω—ã–π –ª–æ–º—Ç–∏–∫–∞–º–∏',
    manufacturer: '–•–ª–µ–±–æ–∑–∞–≤–æ–¥ ‚Ññ1',
    weight: '500 –≥',
    barcode: '4600334567890',
    qrData:
      'https://markirovka.sherhan1988hp.workers.dev/product/BREAD-WHT-500G',
    status: 'active',
  },
  {
    id: '3',
    name: '–ö–æ–ª–±–∞—Å–∞ –≤–∞—Ä–µ–Ω–∞—è "–î–æ–∫—Ç–æ—Ä—Å–∫–∞—è"',
    sku: 'SAUSAGE-DOC-300G',
    price: 285.0,
    category: '–ú—è—Å–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è',
    description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –≤–∞—Ä–µ–Ω–∞—è –∫–æ–ª–±–∞—Å–∞ –ø–æ –ì–û–°–¢—É',
    manufacturer: '–ú—è—Å–æ–∫–æ–º–±–∏–Ω–∞—Ç "–¢—Ä–∞–¥–∏—Ü–∏—è"',
    weight: '300 –≥',
    barcode: '4600234789012',
    qrData:
      'https://markirovka.sherhan1988hp.workers.dev/product/SAUSAGE-DOC-300G',
    status: 'active',
  },
];

// –ú–æ–∫ –¥–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–æ–≤
const mockTemplates: LabelTemplate[] = [
  {
    id: 'dairy-basic',
    name: '–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã - –ë–∞–∑–æ–≤—ã–π',
    category: '–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã',
    description: '–ü—Ä–æ—Å—Ç–∞—è —ç—Ç–∏–∫–µ—Ç–∫–∞ –¥–ª—è –º–æ–ª–æ—á–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤',
    thumbnail: 'ü•õ',
    suitable: ['–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã'],
  },
  {
    id: 'bread-standard',
    name: '–•–ª–µ–±–æ–±—É–ª–æ—á–Ω—ã–µ - –°—Ç–∞–Ω–¥–∞—Ä—Ç',
    category: '–•–ª–µ–±–æ–±—É–ª–æ—á–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è',
    description: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —ç—Ç–∏–∫–µ—Ç–∫–∞ –¥–ª—è —Ö–ª–µ–±–∞ –∏ –≤—ã–ø–µ—á–∫–∏',
    thumbnail: 'üçû',
    suitable: ['–•–ª–µ–±–æ–±—É–ª–æ—á–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è'],
  },
  {
    id: 'meat-premium',
    name: '–ú—è—Å–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è - –ü—Ä–µ–º–∏—É–º',
    category: '–ú—è—Å–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è',
    description: '–ü—Ä–µ–º–∏—É–º —ç—Ç–∏–∫–µ—Ç–∫–∞ –¥–ª—è –º—è—Å–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤',
    thumbnail: 'ü•©',
    suitable: ['–ú—è—Å–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è'],
  },
  {
    id: 'universal',
    name: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —ç—Ç–∏–∫–µ—Ç–∫–∞',
    category: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è',
    description: '–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤',
    thumbnail: 'üìÑ',
    suitable: [
      '–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã',
      '–•–ª–µ–±–æ–±—É–ª–æ—á–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è',
      '–ú—è—Å–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è',
      '–ù–∞–ø–∏—Ç–∫–∏',
      '–ö–æ–Ω—Å–µ—Ä–≤—ã',
    ],
  },
];

// –ú–æ–∫ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
const mockPrinters = [
  { id: 'zebra-1', name: 'Zebra ZT420 (–õ–∏–Ω–∏—è 1)', status: 'online' },
  { id: 'brother-2', name: 'Brother QL-820 (–õ–∏–Ω–∏—è 2)', status: 'online' },
  { id: 'hp-3', name: 'HP LaserJet (–û—Ñ–∏—Å)', status: 'offline' },
];

const LineOperator: React.FC = () => {
  const [scannedCode, setScannedCode] = useState('');
  const [foundProduct, setFoundProduct] = useState<Product | null>(null);
  const [selectedTemplate, setSelectedTemplate] =
    useState<LabelTemplate | null>(null);
  const [selectedPrinter, setSelectedPrinter] = useState('');
  const [quantity, setQuantity] = useState(1);
  const [printHistory, setPrintHistory] = useState<PrintJob[]>([]);
  const [isScanning, setIsScanning] = useState(false);
  const [operatorName, setOperatorName] = useState('–û–ø–µ—Ä–∞—Ç–æ—Ä 1');
  const [printType, setPrintType] = useState<'direct' | 'pdf'>('direct');

  const scanInputRef = useRef<HTMLInputElement>(null);

  // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    if (scanInputRef.current) {
      scanInputRef.current.focus();
    }
  }, []);

  // –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ QR-–∫–æ–¥—É –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª—É
  const searchProduct = (code: string) => {
    const product = mockProducts.find(
      p =>
        p.qrData.includes(code) ||
        p.sku === code ||
        p.barcode === code ||
        p.name.toLowerCase().includes(code.toLowerCase())
    );
    return product ?? null;
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const handleScan = () => {
    if (!scannedCode.trim()) return;

    setIsScanning(true);

    // –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    setTimeout(() => {
      const product = searchProduct(scannedCode);
      setFoundProduct(product);
      setIsScanning(false);

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —à–∞–±–ª–æ–Ω–∞
      if (product) {
        const suitableTemplate = mockTemplates.find(t =>
          t.suitable.includes(product.category)
        );
        if (suitableTemplate) {
          setSelectedTemplate(suitableTemplate);
        }
      }
    }, 500);
  };

  // –ü–µ—á–∞—Ç—å —ç—Ç–∏–∫–µ—Ç–∫–∏
  const handlePrint = () => {
    if (!foundProduct || !selectedTemplate) {
      alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏ —à–∞–±–ª–æ–Ω –¥–ª—è –ø–µ—á–∞—Ç–∏');
      return;
    }

    if (printType === 'direct' && !selectedPrinter) {
      alert('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–Ω—Ç–µ—Ä –¥–ª—è –ø—Ä—è–º–æ–π –ø–µ—á–∞—Ç–∏');
      return;
    }

    const printJob: PrintJob = {
      id: Date.now().toString(),
      productId: foundProduct.id,
      templateId: selectedTemplate.id,
      quantity,
      type: printType,
      timestamp: new Date().toISOString(),
      operator: operatorName,
      status: 'pending',
    };

    if (printType === 'direct') {
      // –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä—è–º–æ–π –ø–µ—á–∞—Ç–∏
      setTimeout(() => {
        setPrintHistory(prev => [
          ...prev,
          { ...printJob, status: 'completed' },
        ]);
        alert(
          `–ü–µ—á–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –Ω–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–µ ${mockPrinters.find(p => p.id === selectedPrinter)?.name}`
        );
      }, 1000);
    } else {
      // PDF —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
      generatePDF(foundProduct, selectedTemplate, quantity);
      setPrintHistory(prev => [...prev, { ...printJob, status: 'completed' }]);
    }

    // –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –ø–µ—á–∞—Ç–∏
    setScannedCode('');
    setFoundProduct(null);
    setQuantity(1);
    if (scanInputRef.current) {
      scanInputRef.current.focus();
    }
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF
  const generatePDF = (
    product: Product,
    template: LabelTemplate,
    qty: number
  ) => {
    // –ò–º–∏—Ç–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF
    const fileName = `${product.sku}_${template.id}_${qty}—à—Ç_${new Date().toISOString().split('T')[0]}.pdf`;
    alert(`PDF —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${fileName}`);

    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ —Å–µ—Ä–≤–∏—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF
    // console.log('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –¥–ª—è:', { product, template, quantity: qty });
  };

  // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
  const handleClear = () => {
    setScannedCode('');
    setFoundProduct(null);
    setSelectedTemplate(null);
    setQuantity(1);
    if (scanInputRef.current) {
      scanInputRef.current.focus();
    }
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤
  const suitableTemplates = foundProduct
    ? mockTemplates.filter(
        t => t.suitable.includes(foundProduct.category) || t.id === 'universal'
      )
    : mockTemplates;

  return (
    <div className='p-6 bg-gray-50 dark:bg-gray-900 min-h-screen'>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className='mb-6'>
        <h1 className='text-3xl font-bold text-gray-900 dark:text-gray-100'>
          –†–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        </h1>
        <p className='text-gray-600 dark:text-gray-300 mt-2'>
          –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR-–∫–æ–¥–æ–≤ –∏ –ø–µ—á–∞—Ç—å —ç—Ç–∏–∫–µ—Ç–æ–∫
        </p>
      </div>

      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ */}
      <div className='bg-white dark:bg-gray-800 rounded-lg shadow-sm p-4 mb-6'>
        <div className='grid grid-cols-1 md:grid-cols-3 gap-4'>
          <div>
            <label
              htmlFor='operator-name'
              className='block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2'
            >
              –ò–º—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            </label>
            <input
              id='operator-name'
              type='text'
              value={operatorName}
              onChange={e => setOperatorName(e.target.value)}
              className='w-full px-3 py-2 border border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-200 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500'
            />
          </div>
          <div>
            <label
              htmlFor='print-type'
              className='block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2'
            >
              –¢–∏–ø –ø–µ—á–∞—Ç–∏
            </label>
            <select
              id='print-type'
              value={printType}
              onChange={e => setPrintType(e.target.value as 'direct' | 'pdf')}
              className='w-full px-3 py-2 border border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-200 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500'
            >
              <option value='direct'>–ü—Ä—è–º–∞—è –ø–µ—á–∞—Ç—å</option>
              <option value='pdf'>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å PDF</option>
            </select>
          </div>
          {printType === 'direct' && (
            <div>
              <label
                htmlFor='printer-select'
                className='block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2'
              >
                –ü—Ä–∏–Ω—Ç–µ—Ä
              </label>
              <select
                id='printer-select'
                value={selectedPrinter}
                onChange={e => setSelectedPrinter(e.target.value)}
                className='w-full px-3 py-2 border border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-200 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500'
              >
                <option value=''>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–Ω—Ç–µ—Ä</option>
                {mockPrinters.map(printer => (
                  <option
                    key={printer.id}
                    value={printer.id}
                    disabled={printer.status !== 'online'}
                  >
                    {printer.name} (
                    {printer.status === 'online' ? '–í —Å–µ—Ç–∏' : '–û—Ñ–ª–∞–π–Ω'})
                  </option>
                ))}
              </select>
            </div>
          )}
        </div>
      </div>

      <div className='grid grid-cols-1 lg:grid-cols-2 gap-6'>
        {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ */}
        <div className='space-y-6'>
          {/* –°–∫–∞–Ω–µ—Ä QR-–∫–æ–¥–∞ */}
          <div className='bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6'>
            <h2 className='text-xl font-semibold text-gray-900 dark:text-gray-100 mb-4'>
              üì± –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR-–∫–æ–¥–∞
            </h2>

            <div className='space-y-4'>
              <div>
                <label
                  htmlFor='scan-input'
                  className='block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2'
                >
                  QR-–∫–æ–¥ / –ê—Ä—Ç–∏–∫—É–ª / –®—Ç—Ä–∏—Ö-–∫–æ–¥
                </label>
                <div className='flex gap-2'>
                  <input
                    id='scan-input'
                    ref={scanInputRef}
                    type='text'
                    value={scannedCode}
                    onChange={e => setScannedCode(e.target.value)}
                    onKeyDown={e => e.key === 'Enter' && handleScan()}
                    placeholder='–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª'
                    className='flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-200 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500'
                    disabled={isScanning}
                  />
                  <button
                    onClick={handleScan}
                    disabled={!scannedCode.trim() || isScanning}
                    className='px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 disabled:bg-gray-400 dark:bg-indigo-700 dark:hover:bg-indigo-800'
                  >
                    {isScanning ? 'üîÑ' : 'üîç'}
                  </button>
                </div>
              </div>

              <div className='text-sm text-gray-500 dark:text-gray-400'>
                üí° –ü–æ–º–µ—Å—Ç–∏—Ç–µ –∫—É—Ä—Å–æ—Ä –≤ –ø–æ–ª–µ –≤—ã—à–µ –∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ —Å–∫–∞–Ω–µ—Ä–æ–º
              </div>
            </div>
          </div>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ */}
          {foundProduct ? (
            <div className='bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6'>
              <h3 className='text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4'>
                üì¶ –ù–∞–π–¥–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä
              </h3>
              <div className='space-y-3'>
                <div>
                  <div className='text-lg font-medium text-gray-900 dark:text-gray-100'>
                    {foundProduct.name}
                  </div>
                  <div className='text-sm text-gray-500 dark:text-gray-400'>
                    {foundProduct.sku} ‚Ä¢ {foundProduct.category}
                  </div>
                </div>
                <div className='grid grid-cols-2 gap-4 text-sm'>
                  <div>
                    <span className='text-gray-500 dark:text-gray-400'>
                      –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å:
                    </span>
                    <div className='font-medium text-gray-900 dark:text-gray-100'>
                      {foundProduct.manufacturer}
                    </div>
                  </div>
                  <div>
                    <span className='text-gray-500 dark:text-gray-400'>
                      –í–µ—Å/–û–±—ä–µ–º:
                    </span>
                    <div className='font-medium text-gray-900 dark:text-gray-100'>
                      {foundProduct.weight}
                    </div>
                  </div>
                  <div>
                    <span className='text-gray-500 dark:text-gray-400'>
                      –¶–µ–Ω–∞:
                    </span>
                    <div className='font-medium text-gray-900 dark:text-gray-100'>
                      ‚ÇΩ{foundProduct.price.toFixed(2)}
                    </div>
                  </div>
                  <div>
                    <span className='text-gray-500 dark:text-gray-400'>
                      –®—Ç—Ä–∏—Ö-–∫–æ–¥:
                    </span>
                    <div className='font-mono text-sm text-gray-900 dark:text-gray-100'>
                      {foundProduct.barcode}
                    </div>
                  </div>
                </div>
                <div>
                  <span className='text-gray-500 dark:text-gray-400'>
                    –û–ø–∏—Å–∞–Ω–∏–µ:
                  </span>
                  <div className='text-sm text-gray-700 dark:text-gray-200'>
                    {foundProduct.description}
                  </div>
                </div>
              </div>
            </div>
          ) : scannedCode && !isScanning ? (
            <div className='bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-6'>
              <div className='flex items-center'>
                <span className='text-yellow-600 dark:text-yellow-400 mr-2'>
                  ‚ö†Ô∏è
                </span>
                <span className='text-yellow-800 dark:text-yellow-300'>
                  –¢–æ–≤–∞—Ä —Å –∫–æ–¥–æ–º &ldquo;{scannedCode}&rdquo; –Ω–µ –Ω–∞–π–¥–µ–Ω
                </span>
              </div>
            </div>
          ) : null}
        </div>

        {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –ü–µ—á–∞—Ç—å */}
        <div className='space-y-6'>
          {/* –í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞ */}
          <div className='bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6'>
            <h3 className='text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4'>
              üè∑Ô∏è –í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞
            </h3>

            <div className='grid grid-cols-1 gap-3'>
              {suitableTemplates.map(template => (
                <button
                  key={template.id}
                  onClick={() => setSelectedTemplate(template)}
                  className={`w-full p-4 border-2 rounded-lg transition-colors text-left ${
                    selectedTemplate?.id === template.id
                      ? 'border-indigo-500 bg-indigo-50 dark:bg-indigo-900/20'
                      : 'border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600'
                  }`}
                >
                  <div className='flex items-center'>
                    <span className='text-2xl mr-3'>{template.thumbnail}</span>
                    <div>
                      <div className='font-medium text-gray-900 dark:text-gray-100'>
                        {template.name}
                      </div>
                      <div className='text-sm text-gray-500 dark:text-gray-400'>
                        {template.description}
                      </div>
                    </div>
                  </div>
                </button>
              ))}
            </div>
          </div>

          {/* –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—á–∞—Ç–∏ */}
          <div className='bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6'>
            <h3 className='text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4'>
              üñ®Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—á–∞—Ç–∏
            </h3>

            <div className='space-y-4'>
              <div>
                <label
                  htmlFor='quantity'
                  className='block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2'
                >
                  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∏–∫–µ—Ç–æ–∫
                </label>
                <input
                  id='quantity'
                  type='number'
                  min='1'
                  max='100'
                  value={quantity}
                  onChange={e => setQuantity(parseInt(e.target.value) || 1)}
                  className='w-full px-3 py-2 border border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-200 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500'
                />
              </div>

              <div className='flex gap-3'>
                <button
                  onClick={handlePrint}
                  disabled={!foundProduct || !selectedTemplate}
                  className='flex-1 bg-green-600 text-white px-4 py-3 rounded-md hover:bg-green-700 disabled:bg-gray-400 dark:bg-green-700 dark:hover:bg-green-800 font-medium'
                >
                  {printType === 'direct' ? 'üñ®Ô∏è –ü–µ—á–∞—Ç—å' : 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å PDF'}
                </button>
                <button
                  onClick={handleClear}
                  className='px-4 py-3 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-200 rounded-md hover:bg-gray-50 dark:hover:bg-gray-700'
                >
                  üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å
                </button>
              </div>
            </div>
          </div>

          {/* –ò—Å—Ç–æ—Ä–∏—è –ø–µ—á–∞—Ç–∏ */}
          <div className='bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6'>
            <h3 className='text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4'>
              üìã –ò—Å—Ç–æ—Ä–∏—è –ø–µ—á–∞—Ç–∏
            </h3>

            <div className='space-y-2 max-h-64 overflow-y-auto'>
              {printHistory.length === 0 ? (
                <div className='text-gray-500 dark:text-gray-400 text-sm text-center py-4'>
                  –ò—Å—Ç–æ—Ä–∏—è –ø–µ—á–∞—Ç–∏ –ø—É—Å—Ç–∞
                </div>
              ) : (
                printHistory
                  .slice()
                  .reverse()
                  .map(job => {
                    const product = mockProducts.find(
                      p => p.id === job.productId
                    );
                    const template = mockTemplates.find(
                      t => t.id === job.templateId
                    );
                    return (
                      <div
                        key={job.id}
                        className='p-3 bg-gray-50 dark:bg-gray-700 rounded border'
                      >
                        <div className='flex justify-between items-start'>
                          <div>
                            <div className='font-medium text-sm text-gray-900 dark:text-gray-100'>
                              {product?.name}
                            </div>
                            <div className='text-xs text-gray-500 dark:text-gray-400'>
                              {template?.name} ‚Ä¢ {job.quantity} —à—Ç. ‚Ä¢{' '}
                              {job.type === 'direct' ? '–ü–µ—á–∞—Ç—å' : 'PDF'}
                            </div>
                          </div>
                          <div className='text-xs text-gray-500 dark:text-gray-400'>
                            {new Date(job.timestamp).toLocaleTimeString()}
                          </div>
                        </div>
                      </div>
                    );
                  })
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default LineOperator;

import html2canvas from 'html2canvas';
import { jsPDF } from 'jspdf';
import * as QRCode from 'qrcode';

interface Product {
  id: string;
  name: string;
  sku: string;
  price: number;
  category: string;
  description: string;
  manufacturer: string;
  weight: string;
  expiryDate: string;
  batchNumber: string;
  barcode: string;
  qrData: string;
}

interface DesignElement {
  id: string;
  type: 'text' | 'qr' | 'image' | 'barcode';
  content: string;
  dataBinding?: string | undefined;
  x: number;
  y: number;
  width: number;
  height: number;
  fontSize?: number;
  color?: string;
}

export class PDFExportService {
  /**
   * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —ç—Ç–∏–∫–µ—Ç–∫—É –≤ PDF
   */
  static async exportLabelToPDF(
    elements: DesignElement[],
    product: Product
  ): Promise<void> {
    try {
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
      const tempContainer = document.createElement('div');
      tempContainer.style.position = 'absolute';
      tempContainer.style.left = '-9999px';
      tempContainer.style.top = '-9999px';
      tempContainer.style.width = '320px';
      tempContainer.style.height = '200px';
      tempContainer.style.backgroundColor = 'white';
      tempContainer.style.border = '1px solid #ccc';
      tempContainer.style.fontFamily = 'Arial, sans-serif';

      document.body.appendChild(tempContainer);

      // –†–µ–Ω–¥–µ—Ä–∏–º —ç—Ç–∏–∫–µ—Ç–∫—É
      await this.renderLabel(tempContainer, elements, product);

      // –ñ–¥–µ–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
      await new Promise(resolve => setTimeout(resolve, 200));

      // –°–æ–∑–¥–∞–µ–º canvas –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞
      const canvas = await html2canvas(tempContainer, {
        width: 320,
        height: 200,
        scale: 2, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        backgroundColor: '#ffffff',
        logging: false,
        useCORS: true,
      });

      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
      document.body.removeChild(tempContainer);

      // –°–æ–∑–¥–∞–µ–º PDF (—Ñ–æ—Ä–º–∞—Ç —ç—Ç–∏–∫–µ—Ç–∫–∏ 80x50mm)
      const pdf = new jsPDF({
        orientation: 'landscape',
        unit: 'mm',
        format: [80, 50],
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ PDF
      const imgData = canvas.toDataURL('image/png');
      pdf.addImage(imgData, 'PNG', 0, 0, 80, 50);

      // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      pdf.setProperties({
        title: `–≠—Ç–∏–∫–µ—Ç–∫–∞ - ${product.name}`,
        subject: `–≠—Ç–∏–∫–µ—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ${product.sku}`,
        author: '–°–∏—Å—Ç–µ–º–∞ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏',
        creator: 'Label Designer',
        keywords: `—ç—Ç–∏–∫–µ—Ç–∫–∞, ${product.category}, ${product.manufacturer}`,
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
      const filename = `–≠—Ç–∏–∫–µ—Ç–∫–∞_${product.sku}_${new Date().toISOString().slice(0, 10)}.pdf`;
      pdf.save(filename);
    } catch (error) {
      throw new Error(
        `–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–∏–∫–µ—Ç–∫—É –≤ PDF: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
      );
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π PDF –¥–ª—è –ø–µ—á–∞—Ç–∏
   */
  static async exportHighQualityPDF(
    elements: DesignElement[],
    product: Product
  ): Promise<void> {
    try {
      // –°–æ–∑–¥–∞–µ–º PDF –≤ –≤—ã—Å–æ–∫–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏
      const pdf = new jsPDF({
        orientation: 'landscape',
        unit: 'pt', // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–Ω–∫—Ç—ã –¥–ª—è –±–æ–ª—å—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
        format: [226.77, 141.73], // 80x50mm –≤ –ø—É–Ω–∫—Ç–∞—Ö (1mm = 2.83465pt)
      });

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –ø—Ä–æ–¥—É–∫—Ç—É
      const processedElements = this.processElements(elements, product);

      // –†–µ–Ω–¥–µ—Ä–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–ø—Ä—è–º—É—é –≤ PDF
      await this.renderElementsToPDF(pdf, processedElements, product);

      // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      pdf.setProperties({
        title: `–≠—Ç–∏–∫–µ—Ç–∫–∞ - ${product.name}`,
        subject: `–≠—Ç–∏–∫–µ—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ${product.sku}`,
        author: '–°–∏—Å—Ç–µ–º–∞ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏',
        creator: 'Label Designer',
        keywords: `—ç—Ç–∏–∫–µ—Ç–∫–∞, ${product.category}, ${product.manufacturer}`,
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
      const filename = `–≠—Ç–∏–∫–µ—Ç–∫–∞_HQ_${product.sku}_${new Date().toISOString().slice(0, 10)}.pdf`;
      pdf.save(filename);
    } catch (error) {
      throw new Error(
        `–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–∏–∫–µ—Ç–∫—É –≤ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π PDF: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
      );
    }
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏—Ç —ç—Ç–∏–∫–µ—Ç–∫—É –≤ HTML –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
   */
  private static async renderLabel(
    container: HTMLElement,
    elements: DesignElement[],
    product: Product
  ): Promise<void> {
    for (const element of elements) {
      const elementDiv = document.createElement('div');
      elementDiv.style.position = 'absolute';
      elementDiv.style.left = `${element.x}px`;
      elementDiv.style.top = `${element.y}px`;
      elementDiv.style.width = `${element.width}px`;
      elementDiv.style.height = `${element.height}px`;
      elementDiv.style.boxSizing = 'border-box';
      elementDiv.style.overflow = 'hidden';

      const content = this.getElementContent(element, product);

      switch (element.type) {
        case 'text':
          elementDiv.style.fontSize = `${element.fontSize ?? 12}px`;
          elementDiv.style.color = element.color ?? '#000000';
          elementDiv.style.display = 'flex';
          elementDiv.style.alignItems = 'center';
          elementDiv.style.fontFamily = 'Arial, sans-serif';
          elementDiv.style.fontWeight = '400';
          elementDiv.style.lineHeight = '1.2';
          elementDiv.style.whiteSpace = 'nowrap';
          elementDiv.textContent = content;
          break;

        case 'qr':
          try {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥ –∫–∞–∫ Data URL
            const qrDataUrl = await QRCode.toDataURL(content, {
              width: element.width,
              margin: 1,
              color: {
                dark: '#000000',
                light: '#FFFFFF',
              },
            });

            const qrImg = document.createElement('img');
            qrImg.src = qrDataUrl;
            qrImg.style.width = '100%';
            qrImg.style.height = '100%';
            qrImg.style.objectFit = 'contain';
            elementDiv.appendChild(qrImg);
          } catch {
            // Fallback –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR
            elementDiv.style.backgroundColor = '#f0f0f0';
            elementDiv.style.border = '1px solid #ccc';
            elementDiv.style.display = 'flex';
            elementDiv.style.alignItems = 'center';
            elementDiv.style.justifyContent = 'center';
            elementDiv.style.fontSize = '10px';
            elementDiv.style.color = '#666';
            elementDiv.textContent = 'QR';
          }
          break;

        case 'barcode':
          elementDiv.style.backgroundColor = '#ffffff';
          elementDiv.style.border = '1px solid #000';
          elementDiv.style.display = 'flex';
          elementDiv.style.alignItems = 'center';
          elementDiv.style.justifyContent = 'center';
          elementDiv.style.fontSize = '8px';
          elementDiv.style.fontFamily = 'monospace';
          elementDiv.style.letterSpacing = '1px';
          elementDiv.textContent = '|||||||||||';
          break;

        case 'image':
          elementDiv.style.backgroundColor = '#f8f8f8';
          elementDiv.style.border = '1px dashed #ccc';
          elementDiv.style.display = 'flex';
          elementDiv.style.alignItems = 'center';
          elementDiv.style.justifyContent = 'center';
          elementDiv.style.fontSize = '10px';
          elementDiv.style.color = '#666';
          elementDiv.textContent = 'üñºÔ∏è';
          break;
      }

      container.appendChild(elementDiv);
    }
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–ø—Ä—è–º—É—é –≤ PDF
   */
  private static async renderElementsToPDF(
    pdf: jsPDF,
    elements: DesignElement[],
    product: Product
  ): Promise<void> {
    const processedElements = this.processElements(elements, product);

    for (const element of processedElements) {
      const x = element.x * 0.75; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–∏–∫—Å–µ–ª–∏ –≤ –ø—É–Ω–∫—Ç—ã (1px ‚âà 0.75pt)
      const y = element.y * 0.75;

      switch (element.type) {
        case 'text': {
          pdf.setFontSize((element.fontSize ?? 12) * 0.75);
          pdf.setTextColor(element.color ?? '#000000');
          // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º baseline
          const textY = y + (element.fontSize ?? 12) * 0.75 * 0.8;
          pdf.text(element.content, x, textY);
          break;
        }

        case 'qr':
          try {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥ –¥–ª—è PDF
            const qrSize = Math.min(element.width, element.height) * 0.75;
            const qrDataUrl = await QRCode.toDataURL(element.content, {
              width: qrSize * 4, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
              margin: 0,
              color: {
                dark: '#000000',
                light: '#FFFFFF',
              },
            });

            pdf.addImage(qrDataUrl, 'PNG', x, y, qrSize, qrSize);
          } catch {
            // Fallback –¥–ª—è QR –∫–æ–¥–∞
            pdf.setFillColor(240, 240, 240);
            pdf.rect(x, y, element.width * 0.75, element.height * 0.75, 'F');
            pdf.setFontSize(6);
            pdf.setTextColor('#666666');
            pdf.text('QR', x + element.width * 0.3, y + element.height * 0.5);
          }
          break;

        case 'barcode':
          // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞
          pdf.setFillColor(255, 255, 255);
          pdf.rect(x, y, element.width * 0.75, element.height * 0.75, 'F');
          pdf.setDrawColor(0, 0, 0);
          pdf.rect(x, y, element.width * 0.75, element.height * 0.75, 'S');
          pdf.setFontSize(6);
          pdf.setTextColor('#000000');
          pdf.text('|||||||||||', x + 2, y + element.height * 0.4);
          break;

        case 'image':
          // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
          pdf.setFillColor(248, 248, 248);
          pdf.rect(x, y, element.width * 0.75, element.height * 0.75, 'F');
          pdf.setDrawColor(204, 204, 204);
          pdf.rect(x, y, element.width * 0.75, element.height * 0.75, 'S');
          pdf.setFontSize(8);
          pdf.setTextColor('#666666');
          pdf.text('IMG', x + element.width * 0.3, y + element.height * 0.5);
          break;
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –¥–∞–Ω–Ω—ã–º –ø—Ä–æ–¥—É–∫—Ç–∞
   */
  private static processElements(
    elements: DesignElement[],
    product: Product
  ): DesignElement[] {
    return elements.map(element => ({
      ...element,
      content: this.getElementContent(element, product),
    }));
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å —É—á–µ—Ç–æ–º –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –¥–∞–Ω–Ω—ã–º
   */
  private static getElementContent(
    element: DesignElement,
    product: Product
  ): string {
    if (element.dataBinding && product) {
      const value = product[element.dataBinding as keyof Product];
      if (element.dataBinding === 'price') {
        return `${value} ‚ÇΩ`;
      }
      return value?.toString() || element.content;
    }
    return element.content;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–µ–≤—å—é —ç—Ç–∏–∫–µ—Ç–∫–∏ –≤ –≤–∏–¥–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  static async createPreviewImage(
    elements: DesignElement[],
    product: Product
  ): Promise<string> {
    try {
      const tempContainer = document.createElement('div');
      tempContainer.style.position = 'absolute';
      tempContainer.style.left = '-9999px';
      tempContainer.style.top = '-9999px';
      tempContainer.style.width = '320px';
      tempContainer.style.height = '200px';
      tempContainer.style.backgroundColor = 'white';
      tempContainer.style.border = '1px solid #ccc';

      document.body.appendChild(tempContainer);

      await this.renderLabel(tempContainer, elements, product);

      await new Promise(resolve => setTimeout(resolve, 200));

      const canvas = await html2canvas(tempContainer, {
        width: 320,
        height: 200,
        scale: 1,
        backgroundColor: '#ffffff',
        logging: false,
      });

      document.body.removeChild(tempContainer);

      return canvas.toDataURL('image/png');
    } catch (error) {
      throw new Error(
        `–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ–≤—å—é —ç—Ç–∏–∫–µ—Ç–∫–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
      );
    }
  }
}

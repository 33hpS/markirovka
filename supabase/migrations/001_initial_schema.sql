-- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏

-- –¢–∞–±–ª–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤
CREATE TABLE IF NOT EXISTS categories (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    code VARCHAR(10) NOT NULL UNIQUE,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
CREATE TABLE IF NOT EXISTS products (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(255) NOT NULL,
    sku VARCHAR(100) UNIQUE,
    category_id UUID REFERENCES categories(id) ON DELETE SET NULL,
    barcode VARCHAR(255),
    qr_data TEXT,
    price DECIMAL(10, 2),
    unit VARCHAR(50),
    description TEXT,
    metadata JSONB,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –¢–∞–±–ª–∏—Ü–∞ —à–∞–±–ª–æ–Ω–æ–≤ —ç—Ç–∏–∫–µ—Ç–æ–∫
CREATE TABLE IF NOT EXISTS label_templates (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(255) NOT NULL,
    category VARCHAR(100),
    description TEXT,
    width INTEGER NOT NULL DEFAULT 400,
    height INTEGER NOT NULL DEFAULT 300,
    elements JSONB NOT NULL DEFAULT '[]'::jsonb,
    metadata JSONB,
    is_default BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –¢–∞–±–ª–∏—Ü–∞ –ø–∞—Ä—Ç–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
CREATE TABLE IF NOT EXISTS batches (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    batch_number VARCHAR(100) NOT NULL UNIQUE,
    product_id UUID REFERENCES products(id) ON DELETE CASCADE,
    quantity INTEGER NOT NULL,
    manufactured_date DATE,
    expiry_date DATE,
    status VARCHAR(50) DEFAULT 'active',
    metadata JSONB,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –¢–∞–±–ª–∏—Ü–∞ –∂—É—Ä–Ω–∞–ª–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
CREATE TABLE IF NOT EXISTS production_logs (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    batch_id UUID REFERENCES batches(id) ON DELETE CASCADE,
    product_id UUID REFERENCES products(id) ON DELETE CASCADE,
    action VARCHAR(100) NOT NULL,
    quantity INTEGER,
    operator VARCHAR(255),
    notes TEXT,
    metadata JSONB,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
CREATE INDEX IF NOT EXISTS idx_products_category ON products(category_id);
CREATE INDEX IF NOT EXISTS idx_products_sku ON products(sku);
CREATE INDEX IF NOT EXISTS idx_batches_product ON batches(product_id);
CREATE INDEX IF NOT EXISTS idx_batches_status ON batches(status);
CREATE INDEX IF NOT EXISTS idx_production_logs_batch ON production_logs(batch_id);
CREATE INDEX IF NOT EXISTS idx_production_logs_created ON production_logs(created_at DESC);

-- –¢—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
DROP TRIGGER IF EXISTS update_categories_updated_at ON categories;
DROP TRIGGER IF EXISTS update_products_updated_at ON products;
DROP TRIGGER IF EXISTS update_label_templates_updated_at ON label_templates;
DROP TRIGGER IF EXISTS update_batches_updated_at ON batches;

-- –°–æ–∑–¥–∞—ë–º —Ç—Ä–∏–≥–≥–µ—Ä—ã –∑–∞–Ω–æ–≤–æ
CREATE TRIGGER update_categories_updated_at
    BEFORE UPDATE ON categories
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_products_updated_at
    BEFORE UPDATE ON products
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_label_templates_updated_at
    BEFORE UPDATE ON label_templates
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_batches_updated_at
    BEFORE UPDATE ON batches
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- –í—Å—Ç–∞–≤–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
INSERT INTO categories (code, name, description) VALUES
    ('01', '–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã', '–ú–æ–ª–æ–∫–æ, —Å—ã—Ä, –π–æ–≥—É—Ä—Ç –∏ –¥—Ä—É–≥–∏–µ –º–æ–ª–æ—á–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è'),
    ('02', '–•–ª–µ–±–æ–±—É–ª–æ—á–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è', '–•–ª–µ–±, –±—É–ª–∫–∏, –≤—ã–ø–µ—á–∫–∞'),
    ('03', '–ú—è—Å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã', '–ú—è—Å–æ –∏ –º—è—Å–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è'),
    ('04', '–û–≤–æ—â–∏ –∏ —Ñ—Ä—É–∫—Ç—ã', '–°–≤–µ–∂–∏–µ –æ–≤–æ—â–∏ –∏ —Ñ—Ä—É–∫—Ç—ã'),
    ('05', '–ù–∞–ø–∏—Ç–∫–∏', '–°–æ–∫–∏, –≤–æ–¥–∞, –≥–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏'),
    ('06', '–ö–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∏–µ –∏–∑–¥–µ–ª–∏—è', '–¢–æ—Ä—Ç—ã, –∫–æ–Ω—Ñ–µ—Ç—ã, –ø–µ—á–µ–Ω—å–µ')
ON CONFLICT (code) DO NOTHING;

-- –í—Å—Ç–∞–≤–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ —ç—Ç–∏–∫–µ—Ç–æ–∫
INSERT INTO label_templates (name, category, description, width, height, elements, is_default) VALUES
    (
        '–ú–æ–ª–æ—á–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è (–±–∞–∑–æ–≤—ã–π)',
        'dairy',
        '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –º–æ–ª–æ—á–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏',
        400,
        300,
        '[
            {"id":"1","type":"text","content":"–ù–ê–ó–í–ê–ù–ò–ï –ü–†–û–î–£–ö–¢–ê","x":20,"y":20,"fontSize":20,"fontWeight":"bold"},
            {"id":"2","type":"text","content":"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: ___","x":20,"y":60,"fontSize":14},
            {"id":"3","type":"text","content":"–î–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞: __/__/____","x":20,"y":90,"fontSize":12},
            {"id":"4","type":"text","content":"–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏: __/__/____","x":20,"y":110,"fontSize":12},
            {"id":"5","type":"qr","data":"","x":280,"y":150,"size":100}
        ]'::jsonb,
        true
    ),
    (
        '–•–ª–µ–±–æ–±—É–ª–æ—á–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è (–±–∞–∑–æ–≤—ã–π)',
        'bakery',
        '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è —Ö–ª–µ–±–æ–±—É–ª–æ—á–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π',
        400,
        300,
        '[
            {"id":"1","type":"text","content":"üçû –•–õ–ï–ë–û–ë–£–õ–û–ß–ù–´–ï –ò–ó–î–ï–õ–ò–Ø","x":20,"y":20,"fontSize":18,"fontWeight":"bold"},
            {"id":"2","type":"text","content":"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: ___","x":20,"y":60,"fontSize":14},
            {"id":"3","type":"text","content":"–í–µ—Å: ___ –≥","x":20,"y":90,"fontSize":12},
            {"id":"4","type":"text","content":"–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–æ: __/__/____","x":20,"y":110,"fontSize":12},
            {"id":"5","type":"qr","data":"","x":280,"y":150,"size":100}
        ]'::jsonb,
        true
    )
ON CONFLICT DO NOTHING;

-- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Row Level Security (RLS)
ALTER TABLE categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE products ENABLE ROW LEVEL SECURITY;
ALTER TABLE label_templates ENABLE ROW LEVEL SECURITY;
ALTER TABLE batches ENABLE ROW LEVEL SECURITY;
ALTER TABLE production_logs ENABLE ROW LEVEL SECURITY;

-- –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
DROP POLICY IF EXISTS "Allow all for authenticated users" ON categories;
DROP POLICY IF EXISTS "Allow all for authenticated users" ON products;
DROP POLICY IF EXISTS "Allow all for authenticated users" ON label_templates;
DROP POLICY IF EXISTS "Allow all for authenticated users" ON batches;
DROP POLICY IF EXISTS "Allow all for authenticated users" ON production_logs;

-- –ü–æ–ª–∏—Ç–∏–∫–∏ –¥–æ—Å—Ç—É–ø–∞ (–ø–æ–∫–∞ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
CREATE POLICY "Allow all for authenticated users" ON categories FOR ALL USING (true);
CREATE POLICY "Allow all for authenticated users" ON products FOR ALL USING (true);
CREATE POLICY "Allow all for authenticated users" ON label_templates FOR ALL USING (true);
CREATE POLICY "Allow all for authenticated users" ON batches FOR ALL USING (true);
CREATE POLICY "Allow all for authenticated users" ON production_logs FOR ALL USING (true);

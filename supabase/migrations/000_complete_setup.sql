-- =====================================================
-- –ü–û–õ–ù–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø: –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü + Realtime
-- =====================================================
-- –ü—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª –û–î–ò–ù –†–ê–ó –≤ Supabase SQL Editor
-- –û–Ω —É–¥–∞–ª–∏—Ç —Å—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏ —Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤—ã–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π

-- =====================================================
-- 0. –û–ß–ò–°–¢–ö–ê (—É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤)
-- =====================================================

-- –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫–ª—é—á–∞–µ–º realtime –ø—É–±–ª–∏–∫–∞—Ü–∏—é –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Ç–∞–±–ª–∏—Ü (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
DO $$
BEGIN
  -- –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
  BEGIN
    ALTER PUBLICATION supabase_realtime DROP TABLE categories;
  EXCEPTION WHEN OTHERS THEN NULL;
  END;
  
  BEGIN
    ALTER PUBLICATION supabase_realtime DROP TABLE products;
  EXCEPTION WHEN OTHERS THEN NULL;
  END;
  
  BEGIN
    ALTER PUBLICATION supabase_realtime DROP TABLE label_templates;
  EXCEPTION WHEN OTHERS THEN NULL;
  END;
  
  BEGIN
    ALTER PUBLICATION supabase_realtime DROP TABLE batches;
  EXCEPTION WHEN OTHERS THEN NULL;
  END;
  
  BEGIN
    ALTER PUBLICATION supabase_realtime DROP TABLE production_logs;
  EXCEPTION WHEN OTHERS THEN NULL;
  END;
END $$;

-- –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (—ç—Ç–æ —É–¥–∞–ª–∏—Ç –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
DROP FUNCTION IF EXISTS broadcast_category_change() CASCADE;
DROP FUNCTION IF EXISTS broadcast_template_change() CASCADE;
DROP FUNCTION IF EXISTS broadcast_product_change() CASCADE;
DROP FUNCTION IF EXISTS broadcast_message(TEXT, TEXT, JSONB) CASCADE;
DROP FUNCTION IF EXISTS update_updated_at_column() CASCADE;

-- –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã (CASCADE —É–¥–∞–ª–∏—Ç –≤—Å–µ –∑–∞–≤–∏—Å–∏–º—ã–µ –æ–±—ä–µ–∫—Ç—ã)
DROP TABLE IF EXISTS production_logs CASCADE;
DROP TABLE IF EXISTS batches CASCADE;
DROP TABLE IF EXISTS products CASCADE;
DROP TABLE IF EXISTS label_templates CASCADE;
DROP TABLE IF EXISTS categories CASCADE;

-- =====================================================
-- 1. –°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶
-- =====================================================

-- –¢–∞–±–ª–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤
CREATE TABLE categories (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    code VARCHAR(10) NOT NULL UNIQUE,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
CREATE TABLE products (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(255) NOT NULL,
    sku VARCHAR(100) UNIQUE,
    category_id UUID REFERENCES categories(id) ON DELETE SET NULL,
    barcode VARCHAR(255),
    qr_data TEXT,
    price DECIMAL(10, 2),
    unit VARCHAR(50),
    description TEXT,
    metadata JSONB,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –¢–∞–±–ª–∏—Ü–∞ —à–∞–±–ª–æ–Ω–æ–≤ —ç—Ç–∏–∫–µ—Ç–æ–∫
CREATE TABLE label_templates (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(255) NOT NULL,
    category VARCHAR(100),
    description TEXT,
    width INTEGER NOT NULL DEFAULT 400,
    height INTEGER NOT NULL DEFAULT 300,
    elements JSONB NOT NULL DEFAULT '[]'::jsonb,
    metadata JSONB,
    is_default BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –¢–∞–±–ª–∏—Ü–∞ –ø–∞—Ä—Ç–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
CREATE TABLE batches (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    batch_number VARCHAR(100) NOT NULL UNIQUE,
    product_id UUID REFERENCES products(id) ON DELETE CASCADE,
    quantity INTEGER NOT NULL,
    manufactured_date DATE,
    expiry_date DATE,
    status VARCHAR(50) DEFAULT 'active',
    metadata JSONB,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –¢–∞–±–ª–∏—Ü–∞ –∂—É—Ä–Ω–∞–ª–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
CREATE TABLE production_logs (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    batch_id UUID REFERENCES batches(id) ON DELETE CASCADE,
    product_id UUID REFERENCES products(id) ON DELETE CASCADE,
    action VARCHAR(100) NOT NULL,
    quantity INTEGER,
    operator VARCHAR(255),
    notes TEXT,
    metadata JSONB,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =====================================================
-- 2. –°–û–ó–î–ê–ù–ò–ï –ò–ù–î–ï–ö–°–û–í
-- =====================================================

CREATE INDEX idx_products_category ON products(category_id);
CREATE INDEX idx_products_sku ON products(sku);
CREATE INDEX idx_batches_product ON batches(product_id);
CREATE INDEX idx_batches_status ON batches(status);
CREATE INDEX idx_production_logs_batch ON production_logs(batch_id);
CREATE INDEX idx_production_logs_created ON production_logs(created_at DESC);

-- =====================================================
-- 3. –¢–†–ò–ì–ì–ï–†–´ –î–õ–Ø updated_at
-- =====================================================

CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_categories_updated_at
    BEFORE UPDATE ON categories
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_products_updated_at
    BEFORE UPDATE ON products
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_label_templates_updated_at
    BEFORE UPDATE ON label_templates
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_batches_updated_at
    BEFORE UPDATE ON batches
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- =====================================================
-- 4. –í–°–¢–ê–í–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•
-- =====================================================

INSERT INTO categories (code, name, description) VALUES
    ('01', '–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã', '–ú–æ–ª–æ–∫–æ, —Å—ã—Ä, –π–æ–≥—É—Ä—Ç –∏ –¥—Ä—É–≥–∏–µ –º–æ–ª–æ—á–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è'),
    ('02', '–•–ª–µ–±–æ–±—É–ª–æ—á–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è', '–•–ª–µ–±, –±—É–ª–∫–∏, –≤—ã–ø–µ—á–∫–∞'),
    ('03', '–ú—è—Å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã', '–ú—è—Å–æ –∏ –º—è—Å–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è'),
    ('04', '–û–≤–æ—â–∏ –∏ —Ñ—Ä—É–∫—Ç—ã', '–°–≤–µ–∂–∏–µ –æ–≤–æ—â–∏ –∏ —Ñ—Ä—É–∫—Ç—ã'),
    ('05', '–ù–∞–ø–∏—Ç–∫–∏', '–°–æ–∫–∏, –≤–æ–¥–∞, –≥–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏'),
    ('06', '–ö–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∏–µ –∏–∑–¥–µ–ª–∏—è', '–¢–æ—Ä—Ç—ã, –∫–æ–Ω—Ñ–µ—Ç—ã, –ø–µ—á–µ–Ω—å–µ');

INSERT INTO label_templates (name, category, description, width, height, elements, is_default) VALUES
    (
        '–ú–æ–ª–æ—á–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è (–±–∞–∑–æ–≤—ã–π)',
        'dairy',
        '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –º–æ–ª–æ—á–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏',
        400,
        300,
        '[
            {"id":"1","type":"text","content":"–ù–ê–ó–í–ê–ù–ò–ï –ü–†–û–î–£–ö–¢–ê","x":20,"y":20,"fontSize":20,"fontWeight":"bold"},
            {"id":"2","type":"text","content":"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: ___","x":20,"y":60,"fontSize":14},
            {"id":"3","type":"text","content":"–î–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞: __/__/____","x":20,"y":90,"fontSize":12},
            {"id":"4","type":"text","content":"–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏: __/__/____","x":20,"y":110,"fontSize":12},
            {"id":"5","type":"qr","data":"","x":280,"y":150,"size":100}
        ]'::jsonb,
        true
    ),
    (
        '–•–ª–µ–±–æ–±—É–ª–æ—á–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è (–±–∞–∑–æ–≤—ã–π)',
        'bakery',
        '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è —Ö–ª–µ–±–æ–±—É–ª–æ—á–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π',
        400,
        300,
        '[
            {"id":"1","type":"text","content":"üçû –•–õ–ï–ë–û–ë–£–õ–û–ß–ù–´–ï –ò–ó–î–ï–õ–ò–Ø","x":20,"y":20,"fontSize":18,"fontWeight":"bold"},
            {"id":"2","type":"text","content":"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: ___","x":20,"y":60,"fontSize":14},
            {"id":"3","type":"text","content":"–í–µ—Å: ___ –≥","x":20,"y":90,"fontSize":12},
            {"id":"4","type":"text","content":"–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–æ: __/__/____","x":20,"y":110,"fontSize":12},
            {"id":"5","type":"qr","data":"","x":280,"y":150,"size":100}
        ]'::jsonb,
        true
    );

-- =====================================================
-- 5. ROW LEVEL SECURITY (RLS)
-- =====================================================

ALTER TABLE categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE products ENABLE ROW LEVEL SECURITY;
ALTER TABLE label_templates ENABLE ROW LEVEL SECURITY;
ALTER TABLE batches ENABLE ROW LEVEL SECURITY;
ALTER TABLE production_logs ENABLE ROW LEVEL SECURITY;

-- –ü–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è authenticated –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
CREATE POLICY "Allow all for authenticated users" ON categories FOR ALL USING (true);
CREATE POLICY "Allow all for authenticated users" ON products FOR ALL USING (true);
CREATE POLICY "Allow all for authenticated users" ON label_templates FOR ALL USING (true);
CREATE POLICY "Allow all for authenticated users" ON batches FOR ALL USING (true);
CREATE POLICY "Allow all for authenticated users" ON production_logs FOR ALL USING (true);

-- –ü–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è anon (–Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ API)
CREATE POLICY "Allow read for anon users" ON categories FOR SELECT USING (true);
CREATE POLICY "Allow all for anon users" ON categories FOR ALL USING (true);
CREATE POLICY "Allow read for anon users" ON products FOR SELECT USING (true);
CREATE POLICY "Allow all for anon users" ON products FOR ALL USING (true);
CREATE POLICY "Allow read for anon users" ON label_templates FOR SELECT USING (true);
CREATE POLICY "Allow all for anon users" ON label_templates FOR ALL USING (true);
CREATE POLICY "Allow read for anon users" ON batches FOR SELECT USING (true);
CREATE POLICY "Allow all for anon users" ON batches FOR ALL USING (true);
CREATE POLICY "Allow read for anon users" ON production_logs FOR SELECT USING (true);
CREATE POLICY "Allow all for anon users" ON production_logs FOR ALL USING (true);

-- =====================================================
-- 6. SUPABASE REALTIME SETUP
-- =====================================================

-- –í–∫–ª—é—á–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
ALTER PUBLICATION supabase_realtime ADD TABLE categories;
ALTER PUBLICATION supabase_realtime ADD TABLE products;
ALTER PUBLICATION supabase_realtime ADD TABLE label_templates;
ALTER PUBLICATION supabase_realtime ADD TABLE batches;
ALTER PUBLICATION supabase_realtime ADD TABLE production_logs;

-- =====================================================
-- 7. BROADCAST –¢–†–ò–ì–ì–ï–†–´ –î–õ–Ø REALTIME
-- =====================================================

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
CREATE OR REPLACE FUNCTION broadcast_category_change()
RETURNS TRIGGER AS $$
DECLARE
  payload JSON;
BEGIN
  payload = json_build_object(
    'type', TG_OP,
    'table', 'categories',
    'old', row_to_json(OLD),
    'new', row_to_json(NEW),
    'timestamp', NOW()
  );
  
  PERFORM pg_notify('category_changes', payload::text);
  
  IF TG_OP = 'DELETE' THEN
    RETURN OLD;
  ELSE
    RETURN NEW;
  END IF;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER category_broadcast_trigger
  AFTER INSERT OR UPDATE OR DELETE ON categories
  FOR EACH ROW
  EXECUTE FUNCTION broadcast_category_change();

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
CREATE OR REPLACE FUNCTION broadcast_template_change()
RETURNS TRIGGER AS $$
DECLARE
  payload JSON;
BEGIN
  payload = json_build_object(
    'type', TG_OP,
    'table', 'label_templates',
    'old', row_to_json(OLD),
    'new', row_to_json(NEW),
    'timestamp', NOW()
  );
  
  PERFORM pg_notify('template_changes', payload::text);
  
  IF TG_OP = 'DELETE' THEN
    RETURN OLD;
  ELSE
    RETURN NEW;
  END IF;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER template_broadcast_trigger
  AFTER INSERT OR UPDATE OR DELETE ON label_templates
  FOR EACH ROW
  EXECUTE FUNCTION broadcast_template_change();

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
CREATE OR REPLACE FUNCTION broadcast_product_change()
RETURNS TRIGGER AS $$
DECLARE
  payload JSON;
BEGIN
  payload = json_build_object(
    'type', TG_OP,
    'table', 'products',
    'old', row_to_json(OLD),
    'new', row_to_json(NEW),
    'timestamp', NOW()
  );
  
  PERFORM pg_notify('product_changes', payload::text);
  
  IF TG_OP = 'DELETE' THEN
    RETURN OLD;
  ELSE
    RETURN NEW;
  END IF;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER product_broadcast_trigger
  AFTER INSERT OR UPDATE OR DELETE ON products
  FOR EACH ROW
  EXECUTE FUNCTION broadcast_product_change();

-- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è broadcast
CREATE OR REPLACE FUNCTION broadcast_message(
  channel_name TEXT,
  event_name TEXT,
  payload JSONB
)
RETURNS void AS $$
BEGIN
  PERFORM pg_notify(
    channel_name,
    json_build_object(
      'event', event_name,
      'payload', payload,
      'timestamp', NOW()
    )::text
  );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

GRANT EXECUTE ON FUNCTION broadcast_message(TEXT, TEXT, JSONB) TO authenticated;
GRANT EXECUTE ON FUNCTION broadcast_message(TEXT, TEXT, JSONB) TO anon;

-- =====================================================
-- 8. –ü–†–û–í–ï–†–û–ß–ù–´–ï –ó–ê–ü–†–û–°–´
-- =====================================================

-- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
SELECT 
  table_name,
  'Created' as status
FROM information_schema.tables 
WHERE table_schema = 'public' 
  AND table_type = 'BASE TABLE'
ORDER BY table_name;

-- –ü—Ä–æ–≤–µ—Ä—è–µ–º Realtime
SELECT 
  tablename,
  'Realtime enabled' as status
FROM pg_publication_tables 
WHERE pubname = 'supabase_realtime'
ORDER BY tablename;

-- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã
SELECT 
  trigger_name,
  event_object_table,
  'Active' as status
FROM information_schema.triggers
WHERE trigger_schema = 'public'
ORDER BY event_object_table, trigger_name;

-- –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
SELECT 'categories' as table_name, COUNT(*) as row_count FROM categories
UNION ALL
SELECT 'products', COUNT(*) FROM products
UNION ALL
SELECT 'label_templates', COUNT(*) FROM label_templates
UNION ALL
SELECT 'batches', COUNT(*) FROM batches
UNION ALL
SELECT 'production_logs', COUNT(*) FROM production_logs;

-- =====================================================
-- –ì–û–¢–û–í–û! ‚úÖ
-- =====================================================
-- –¢–µ–ø–µ—Ä—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
-- —á–µ—Ä–µ–∑ Supabase Realtime —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –Ω–∞ Cloudflare Workers

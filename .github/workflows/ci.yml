name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-test:
    name: Lint & Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - name: Install deps
        run: npm ci
      - name: Type check
        run: npm run type-check
      - name: Lint
        run: npm run lint
      - name: Ensure tests (auto smoke)
        run: npm run ensure-tests
      - name: Test
        run: npm run test:coverage -- --passWithNoTests
      - name: Upload coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage
          if-no-files-found: ignore
      - name: Set build metadata env vars
        run: |
          echo "COMMIT_SHA=${GITHUB_SHA}" >> $GITHUB_ENV
          echo "PKG_VERSION=$(node -p \"require('./package.json').version\")" >> $GITHUB_ENV
      - name: Upload coverage to Codecov
        if: success()
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/coverage-final.json
          fail_ci_if_error: false
          verbose: false
  deploy:
    if: github.ref == 'refs/heads/main'
    needs: lint-test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - name: Install deps (prod + wrangler)
        run: npm ci --omit=dev=false
      - name: Export build metadata
        run: |
          echo "COMMIT_SHA=${GITHUB_SHA}" >> $GITHUB_ENV
          echo "PKG_VERSION=$(node -p \"require('./package.json').version\")" >> $GITHUB_ENV
      - name: Build (assets)
        run: npm run build
        env:
          STAGING: 'false'
      - name: Wrangler deploy
        run: npx wrangler deploy --var COMMIT_SHA:$COMMIT_SHA --var PKG_VERSION:$PKG_VERSION
        env:
          COMMIT_SHA: ${{ env.COMMIT_SHA }}
          PKG_VERSION: ${{ env.PKG_VERSION }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-test:
    name: Lint & Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - name: Install deps
        run: npm ci
      - name: Type check
        run: npm run type-check
      - name: Lint
        run: npm run lint
      - name: Ensure tests (auto smoke)
        run: npm run ensure-tests
      - name: Test
        run: npm run test:coverage -- --passWithNoTests
      - name: Upload coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage
          if-no-files-found: ignore
      - name: Set build metadata env vars
        run: |
          echo "COMMIT_SHA=${GITHUB_SHA}" >> $GITHUB_ENV
          echo "PKG_VERSION=$(node -p \"require('./package.json').version\")" >> $GITHUB_ENV
      - name: Upload coverage to Codecov
        if: success()
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/coverage-final.json
          fail_ci_if_error: false
          verbose: false
  deploy:
    if: github.ref == 'refs/heads/main'
    needs: lint-test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - name: Install deps (prod + wrangler)
        run: npm ci --omit=dev=false
      - name: Export build metadata
        run: |
          echo "COMMIT_SHA=${GITHUB_SHA}" >> $GITHUB_ENV
          echo "PKG_VERSION=$(node -p \"require('./package.json').version\")" >> $GITHUB_ENV
      - name: Build (assets)
        run: npm run build
        env:
          STAGING: 'false'
      - name: Wrangler deploy
        run: npx wrangler deploy --var COMMIT_SHA=${COMMIT_SHA} --var PKG_VERSION=${PKG_VERSION}
        env:
          COMMIT_SHA: ${{ env.COMMIT_SHA }}
          PKG_VERSION: ${{ env.PKG_VERSION }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      - name: Debug deployed version
        run: |
          echo "Expect commit: ${COMMIT_SHA}";
          # Wait a few seconds for propagation
          sleep 5
          curl -s https://markirovka.${{ secrets.CLOUDFLARE_ACCOUNT_ID }}.workers.dev/version || true
        env:
          COMMIT_SHA: ${{ env.COMMIT_SHA }}
  e2e-smoke:
    if: github.ref == 'refs/heads/main'
    needs: deploy
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - name: Install deps
        run: npm ci
      - name: Resolve base URL
        id: base
        run: |
          if [ -n "${{ secrets.WORKER_BASE_URL }}" ]; then
            echo "url=${{ secrets.WORKER_BASE_URL }}" >> $GITHUB_OUTPUT
          else
            echo "url=https://markirovka.${{ secrets.CLOUDFLARE_ACCOUNT_ID }}.workers.dev" >> $GITHUB_OUTPUT
          fi
      - name: Wait for /health
        run: |
          URL="${{ steps.base.outputs.url }}"
          echo "Probing $URL/health";
          for i in {1..30}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$URL/health" || true)
            if [ "$code" = "200" ]; then echo "Healthy"; exit 0; fi
            sleep 2
          done
          echo "Timeout waiting for /health"; exit 1
      - name: Verify deployed commit
        run: |
          URL="${{ steps.base.outputs.url }}"
          echo "Checking /version matches current commit";
          for i in {1..20}; do
            body=$(curl -s "$URL/version" || true)
            echo "Attempt $i: $body";
            commit=$(echo "$body" | jq -r '.commit // empty')
            if [ -n "$commit" ] && [ "$commit" != "unknown" ]; then
              shortLocal="${GITHUB_SHA:0:7}"; shortRemote="${commit:0:7}";
              if [ "$shortLocal" = "$shortRemote" ]; then
                echo "Commit match: $shortRemote"; exit 0;
              else
                echo "Mismatch (local $shortLocal vs remote $shortRemote)";
              fi
            fi
            sleep 3
          done
          echo "Failed to verify deployed commit"; exit 1
      - name: Run Playwright smoke (chromium only)
        run: npx playwright test --project=chromium --grep "Landing page"
        env:
          E2E_BASE_URL: ${{ steps.base.outputs.url }}
      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report
